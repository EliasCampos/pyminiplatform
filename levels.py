import operator

import pygame

import configs
from entities import Vector, Block, Lava, Coin, Player


class Level:

    def __init__(self, level_map):
        self.player = None
        self.lavas = []
        self.coins = []
        self.blocks = []
        self.level_map = level_map
        self.speed_factor = 1

    def reset(self):
        self.player = None
        self.lavas = []
        self.coins = []
        self.blocks = []

        for i, line in enumerate(self.level_map):
            for j, el in enumerate(line):
                location = Vector(j * Block.SIZE, i * Block.SIZE)
                if el in ("v", "|", "="):
                    direction = Vector(el == "=", el in ("v", "|"))
                    lava = Lava(location, direction, is_repeatable=el == "v")
                    self.lavas.append(lava)
                elif el == "o":
                    coin = Coin(location)
                    self.coins.append(coin)
                elif el == "@":
                    self.player = Player(location)
                elif el == "#":
                    block = Block(location)
                    self.blocks.append(block)

    @property
    def entities(self):
        return sum((
            self.blocks,
            self.coins,
            self.lavas,
        ), [])

    def update(self, time):
        self._handle_keypress(time)
        for entity in self.entities:
            entity.update(time, level=self)
        self.player.update(time, level=self)

        self.coins = list(filter(operator.attrgetter("is_free"), self.coins))
        if not self.coins:
            self.player.set_won()

    def redraw(self, screen):
        with configs.camera_offset_context(
            x=self.player.location.x - configs.WINDOW_WIDTH // 2,
            y=self.player.location.y - configs.WINDOW_HEIGHT // 2
        ):
            self.player.render(screen)
            for entity in self.entities:
                entity.render(screen)

    @property
    def is_running(self):
        return not (self.player.is_dead or self.player.is_winner)

    @property
    def is_complete(self):
        return self.player.is_winner

    def _handle_keypress(self, time):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.player.move_left(time)
        if keys[pygame.K_RIGHT]:
            self.player.move_right(time)
        if keys[pygame.K_UP]:
            self.player.jump(time)

    @classmethod
    def get_default_set(cls):
        level_maps = [
            (
                "............................................................................##..",
                ".............................................................................#..",
                ".............................................................................#..",
                ".............................................................................#..",
                ".............................................................................#..",
                ".............................................................................#..",
                "..##..............................................................###........#..",
                "..#................................................##......##....##+##.......#..",
                "..#.................................o.o......##..................#+++#.......#..",
                "..#..............................................................##+##.......#..",
                "..#................................#####..........................#v#........#..",
                "..#..........................................................................#..",
                "..#.......................................o.o................................#..",
                "..#.....................o....................................................#..",
                "..#..@...................................#####.............................o.#..",
                "..#..........####.......o....................................................#..",
                "..#..........#..#................................................#####.......#..",
                "..############..###############...####################.....#######...#########..",
                "..............................#...#..................#.....#....................",
                "..............................#+++#..................#+++++#....................",
                "..............................#+++#..................#+++++#....................",
                "..............................#####..................#######....................",
                "................................................................................",
                "................................................................................",
            ),
            (
                "................................................................................",
                "................................................................................",
                "....###############################.............................................",
                "...##.............................##########################################....",
                "...#.......................................................................##...",
                "...#....o...................................................................#...",
                "...#................................................=.......................#...",
                "...#.o........################...................o..o...........|........o..#...",
                "...#.........................#..............................................#...",
                "...#....o....................##########.....###################....##########...",
                "...#..................................#+++++#.................#....#............",
                "...###############....oo......=o.o.o..#######.###############.#....#............",
                ".....#...............o..o.............#.......#......#........#....#............",
                ".....#....................#############..######.####.#.########....########.....",
                ".....#.............########..............#...........#.#..................#.....",
                ".....#..........####......####...#####################.#..................#.....",
                ".....#........###............###.......................########....########.....",
                ".....#.......##................#########################......#....#............",
                ".....#.......#................................................#....#............",
                ".....###......................................................#....#............",
                ".......#...............o...........................................#............",
                ".......#...............................................o...........#............",
                ".......#########......###.....############.........................##...........",
                ".............#..................#........#####....#######.o.........########....",
                ".............#++++++++++++++++++#............#....#.....#..................#....",
                ".............#++++++++++++++++++#..........###....###...####.o.............#....",
                ".............####################..........#........#......#.....|.........#....",
                "...........................................#++++++++#......####........@...#....",
                "...........................................#++++++++#.........#............#....",
                "...........................................#++++++++#.........##############....",
                "...........................................##########...........................",
                "................................................................................",
            )
        ]

        return [cls(level_map) for level_map in level_maps]
